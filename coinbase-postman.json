{
	"info": {
		"_postman_id": "18d1cc93-d73d-4b0f-8ad5-687e53c709f3",
		"name": "Coinbase Advanced Trading with Cloud Token",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "21286024"
	},
	"item": [
		{
			"name": "Accounts",
			"item": [
				{
					"name": "List Accounts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://api.coinbase.com/api/v3/brokerage/accounts"
					},
					"response": []
				},
				{
					"name": "Get Account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://api.coinbase.com/api/v3/brokerage/accounts/{UUID-HERE}"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "{{token}}"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Portfolio",
			"item": [
				{
					"name": "List Portfolios",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://api.coinbase.com/api/v3/brokerage/portfolios"
					},
					"response": []
				},
				{
					"name": "List Futures Positions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://api.coinbase.com/api/v3/brokerage/cfm/positions"
					},
					"response": []
				},
				{
					"name": "Get Futures Position",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://api.coinbase.com/api/v3/brokerage/cfm/positions/{productID-HERE}"
					},
					"response": []
				},
				{
					"name": "Create Portfolio",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PORTFOLIO NAME HERE\"\n};"
						},
						"url": "https://api.coinbase.com/api/v3/brokerage/portfolios"
					},
					"response": []
				},
				{
					"name": "Move Portfolio Funds",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"funds\": {\n    \"value\":,\n    \"currency\": \"\",\n    }      \n\"source_portfolio_uuid\": \"\",\n\"target_portfolio_uuid\": \"\",\n};"
						},
						"url": "https://api.coinbase.com/api/v3/brokerage/portfolios/move_funds"
					},
					"response": []
				},
				{
					"name": "Get Portfolio Breakdown",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://api.coinbase.com/api/v3/brokerage/portfolios/{portfolioID-HERE}"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "{{token}}"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_order_id\": \"UUID For Order\",\n    \"product_id\": \"PRODCUTID-HERE\",\n    \"side\": \"BUY\",\n    \"order_configuration\": {\n        \"limit_limit_gtc\": {\n        \"base_size\": \"\",\n        \"limit_price\":\"\"\n        }\n    }\n};"
						},
						"url": "https://api.coinbase.com/api/v3/brokerage/orders"
					},
					"response": []
				},
				{
					"name": "List Orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://api.coinbase.com/api/v3/brokerage/orders/historical/batch"
					},
					"response": []
				},
				{
					"name": "List Fills",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set empty navigator and window objects",
									"var navigator = {};",
									"var window = {};",
									"// import external jsrassing-js library",
									"eval(pm.collectionVariables.get(\"jsrassing-js\"));",
									"",
									"// import private key and name for environment variables, parsing them",
									"var privateKey = JSON.parse(pm.collectionVariables.get(\"privateKey\"));",
									"var name = JSON.parse(pm.collectionVariables.get(\"name\"));",
									"",
									"// create header object",
									"var header = {",
									"    alg: \"ES256\",",
									"    typ: \"JWT\",",
									"    kid: name,",
									"    nonce: Math.floor(Date.now() / 1000).toString(),",
									"};",
									"",
									"// create uri string for current request",
									"var host = pm.request.url.host",
									"var path = pm.request.url.path",
									"var hostStr = host.join(\".\");",
									"var pathStr = path.join(\"/\");",
									"var uri = pm.request.method + \" \" + hostStr + \"/\" + pathStr;",
									"",
									"// create data object",
									"var data = {",
									"    aud: ['retail_rest_api_proxy'],",
									"    iss: \"coinbase-cloud\",",
									"    nbf: Math.floor(Date.now() / 1000),",
									"    exp: Math.floor(Date.now() / 1000) + 10,",
									"    sub: name,",
									"    uri,",
									"};",
									"",
									"// stringigy header and data",
									"var sHeader = JSON.stringify(header);",
									"var sPayload = JSON.stringify(data);",
									"",
									"// get the private key and sign to create JWT",
									"var prvKey = KEYUTIL.getKey(privateKey);",
									"var sJWT = KJUR.jws.JWS.sign(\"ES256\", sHeader, sPayload, prvKey);",
									"",
									"// set JWT to token environment variable and reference within 'Authorization - Bearer Token'",
									"pm.environment.set(\"token\", sJWT);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://api.coinbase.com/api/v3/brokerage/orders/historical/fills"
					},
					"response": []
				},
				{
					"name": "Get Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set empty navigator and window objects",
									"var navigator = {};",
									"var window = {};",
									"// import external jsrassing-js library",
									"eval(pm.collectionVariables.get(\"jsrassing-js\"));",
									"",
									"// import private key and name for environment variables, parsing them",
									"var privateKey = JSON.parse(pm.collectionVariables.get(\"privateKey\"));",
									"var name = JSON.parse(pm.collectionVariables.get(\"name\"));",
									"",
									"// create header object",
									"var header = {",
									"    alg: \"ES256\",",
									"    typ: \"JWT\",",
									"    kid: name,",
									"    nonce: Math.floor(Date.now() / 1000).toString(),",
									"};",
									"",
									"// create uri string for current request",
									"var host = pm.request.url.host",
									"var path = pm.request.url.path",
									"var hostStr = host.join(\".\");",
									"var pathStr = path.join(\"/\");",
									"var uri = pm.request.method + \" \" + hostStr + \"/\" + pathStr;",
									"",
									"// create data object",
									"var data = {",
									"    aud: ['retail_rest_api_proxy'],",
									"    iss: \"coinbase-cloud\",",
									"    nbf: Math.floor(Date.now() / 1000),",
									"    exp: Math.floor(Date.now() / 1000) + 10,",
									"    sub: name,",
									"    uri,",
									"};",
									"",
									"// stringigy header and data",
									"var sHeader = JSON.stringify(header);",
									"var sPayload = JSON.stringify(data);",
									"",
									"// get the private key and sign to create JWT",
									"var prvKey = KEYUTIL.getKey(privateKey);",
									"var sJWT = KJUR.jws.JWS.sign(\"ES256\", sHeader, sPayload, prvKey);",
									"",
									"// set JWT to token environment variable and reference within 'Authorization - Bearer Token'",
									"pm.environment.set(\"token\", sJWT);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://api.coinbase.com/api/v3/brokerage/orders/historical/{order_id}"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "{{token}}"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "List Products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://api.coinbase.com/api/v3/brokerage/products"
					},
					"response": []
				},
				{
					"name": "Get Product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://api.coinbase.com/api/v3/brokerage/products/{ProductID-HERE}"
					},
					"response": []
				},
				{
					"name": "Get Best Bid/Ask",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set empty navigator and window objects",
									"var navigator = {};",
									"var window = {};",
									"// import external jsrassing-js library",
									"eval(pm.collectionVariables.get(\"jsrassing-js\"));",
									"",
									"// import private key and name for environment variables, parsing them",
									"var privateKey = JSON.parse(pm.collectionVariables.get(\"privateKey\"));",
									"var name = JSON.parse(pm.collectionVariables.get(\"name\"));",
									"",
									"// create header object",
									"var header = {",
									"    alg: \"ES256\",",
									"    typ: \"JWT\",",
									"    kid: name,",
									"    nonce: Math.floor(Date.now() / 1000).toString(),",
									"};",
									"",
									"// create uri string for current request",
									"var host = pm.request.url.host",
									"var path = pm.request.url.path",
									"var hostStr = host.join(\".\");",
									"var pathStr = path.join(\"/\");",
									"var uri = pm.request.method + \" \" + hostStr + \"/\" + pathStr;",
									"",
									"// create data object",
									"var data = {",
									"    aud: ['retail_rest_api_proxy'],",
									"    iss: \"coinbase-cloud\",",
									"    nbf: Math.floor(Date.now() / 1000),",
									"    exp: Math.floor(Date.now() / 1000) + 10,",
									"    sub: name,",
									"    uri,",
									"};",
									"",
									"// stringigy header and data",
									"var sHeader = JSON.stringify(header);",
									"var sPayload = JSON.stringify(data);",
									"",
									"// get the private key and sign to create JWT",
									"var prvKey = KEYUTIL.getKey(privateKey);",
									"var sJWT = KJUR.jws.JWS.sign(\"ES256\", sHeader, sPayload, prvKey);",
									"",
									"// set JWT to token environment variable and reference within 'Authorization - Bearer Token'",
									"pm.environment.set(\"token\", sJWT);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.coinbase.com/api/v3/brokerage/products/best_bid_ask",
							"protocol": "https",
							"host": [
								"api",
								"coinbase",
								"com"
							],
							"path": [
								"api",
								"v3",
								"brokerage",
								"products",
								"best_bid_ask"
							],
							"query": [
								{
									"key": "product_ids",
									"value": "ETH-USD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Market trades",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set empty navigator and window objects",
									"var navigator = {};",
									"var window = {};",
									"// import external jsrassing-js library",
									"eval(pm.collectionVariables.get(\"jsrassing-js\"));",
									"",
									"// import private key and name for environment variables, parsing them",
									"var privateKey = JSON.parse(pm.collectionVariables.get(\"privateKey\"));",
									"var name = JSON.parse(pm.collectionVariables.get(\"name\"));",
									"",
									"// create header object",
									"var header = {",
									"    alg: \"ES256\",",
									"    typ: \"JWT\",",
									"    kid: name,",
									"    nonce: Math.floor(Date.now() / 1000).toString(),",
									"};",
									"",
									"// create uri string for current request",
									"var host = pm.request.url.host",
									"var path = pm.request.url.path",
									"var hostStr = host.join(\".\");",
									"var pathStr = path.join(\"/\");",
									"var uri = pm.request.method + \" \" + hostStr + \"/\" + pathStr;",
									"",
									"// create data object",
									"var data = {",
									"    aud: ['retail_rest_api_proxy'],",
									"    iss: \"coinbase-cloud\",",
									"    nbf: Math.floor(Date.now() / 1000),",
									"    exp: Math.floor(Date.now() / 1000) + 10,",
									"    sub: name,",
									"    uri,",
									"};",
									"",
									"// stringigy header and data",
									"var sHeader = JSON.stringify(header);",
									"var sPayload = JSON.stringify(data);",
									"",
									"// get the private key and sign to create JWT",
									"var prvKey = KEYUTIL.getKey(privateKey);",
									"var sJWT = KJUR.jws.JWS.sign(\"ES256\", sHeader, sPayload, prvKey);",
									"",
									"// set JWT to token environment variable and reference within 'Authorization - Bearer Token'",
									"pm.environment.set(\"token\", sJWT);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.coinbase.com/api/v3/brokerage/products/BTC-USD?limit=10",
							"protocol": "https",
							"host": [
								"api",
								"coinbase",
								"com"
							],
							"path": [
								"api",
								"v3",
								"brokerage",
								"products",
								"BTC-USD"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product Candles",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.coinbase.com/api/v3/brokerage/products/{ProductID-HERE}/candles?start&end&granularity",
							"protocol": "https",
							"host": [
								"api",
								"coinbase",
								"com"
							],
							"path": [
								"api",
								"v3",
								"brokerage",
								"products",
								"{ProductID-HERE}",
								"candles"
							],
							"query": [
								{
									"key": "start",
									"value": null
								},
								{
									"key": "end",
									"value": null
								},
								{
									"key": "granularity",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "{{token}}"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// set empty navigator and window objects",
					"var navigator = {};",
					"var window = {};",
					"// import external jsrassing-js library",
					"eval(pm.environment.get(\"jsrassing-js\"));",
					"",
					"console.log(\"Raw privateKey:\", pm.environment.get(\"privateKey\"));",
					"console.log(\"Raw name:\", pm.environment.get(\"name\"));",
					"",
					"// import private key and name for environment variables, parsing them",
					"var privateKey = JSON.parse(pm.environment.get(\"privateKey\"));",
					"var name = JSON.parse(pm.environment.get(\"name\"));",
					"",
					"console.log(\"Formatted key: \", privateKey)",
					"console.log(\"Formatted name\", name)",
					"",
					"// create header object",
					"var header = {",
					"    alg: \"ES256\",",
					"    typ: \"JWT\",",
					"    kid: name,",
					"    nonce: Math.floor(Date.now() / 1000).toString(),",
					"};",
					"",
					"// create uri string for current request",
					"var host = pm.request.url.host",
					"var path = pm.request.url.path",
					"var hostStr = host.join(\".\");",
					"var pathStr = path.join(\"/\");",
					"var uri = pm.request.method + \" \" + hostStr + \"/\" + pathStr;",
					"",
					"// create data object",
					"var data = {",
					"    aud: ['retail_rest_api_proxy'],",
					"    iss: \"coinbase-cloud\",",
					"    nbf: Math.floor(Date.now() / 1000),",
					"    exp: Math.floor(Date.now() / 1000) + 10,",
					"    sub: name,",
					"    uri,",
					"};",
					"",
					"// stringigy header and data",
					"var sHeader = JSON.stringify(header);",
					"var sPayload = JSON.stringify(data);",
					"",
					"// get the private key and sign to create JWT",
					"var prvKey = KEYUTIL.getKey(privateKey);",
					"var sJWT = KJUR.jws.JWS.sign(\"ES256\", sHeader, sPayload, prvKey);",
					"",
					"console.log(\"Generated Token: \", sJWT)",
					"",
					"// set JWT to token environment variable and reference within 'Authorization - Bearer Token'",
					"pm.environment.set(\"token\", sJWT);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}